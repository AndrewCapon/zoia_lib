# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ZOIALibrarian.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1567, 1203)
        MainWindow.setFocusPolicy(QtCore.Qt.StrongFocus)
        MainWindow.setStyleSheet("QMainWindow {\n"
"background-color: white;\n"
"}")
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setUnifiedTitleAndToolBarOnMac(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.horizontalLayout_2.setContentsMargins(0, -1, -1, -1)
        self.horizontalLayout_2.setSpacing(6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tabs = QtWidgets.QTabWidget(self.centralwidget)
        self.tabs.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.tabs.setMouseTracking(False)
        self.tabs.setToolTip("")
        self.tabs.setStatusTip("")
        self.tabs.setStyleSheet("QTabBar::tab:selected{\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(140, 224, 241, 255), stop:1 rgba(121, 243, 145, 255));\n"
"border-top-left-radius: 10px 5px;\n"
"border-top-right-radius: 10px 5px;\n"
"border-bottom: 0px;\n"
"padding: 5px, 5px, 5px, 5px;\n"
"width: 200%;\n"
"font: bold;\n"
"}\n"
"QTabBar::tab:!selected{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0.289773 rgba(137, 141, 218, 255), stop:1 rgba(82, 90, 105, 255));\n"
"border-bottom: 0px;\n"
"border-top-left-radius: 10px 5px;\n"
"border-top-right-radius: 10px 5px;\n"
"padding: 5px, 5px, 5px, 5px;\n"
"width: 200%;\n"
"transition-duration: 0.4s;\n"
"cursor: pointer;\n"
"color:white;\n"
"}\n"
"QTabBar::tab:!selected:hover{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(123, 129, 236, 255), stop:1 rgba(59, 209, 211, 255));\n"
"}\n"
"QTabBar {\n"
"background-color: white;\n"
"}\n"
"QTabWidget::tab-bar { \n"
"background-color: white;\n"
"border-bottom: 1px solid white;\n"
"}\n"
"QTabWidget::pane { \n"
"position: absolute; \n"
"}")
        self.tabs.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabs.setMovable(False)
        self.tabs.setTabBarAutoHide(False)
        self.tabs.setObjectName("tabs")
        self.tab_ps = QtWidgets.QWidget()
        self.tab_ps.setToolTip("")
        self.tab_ps.setStyleSheet("background-color:qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(140, 224, 241, 255), stop:1 rgba(121, 243, 145, 255))")
        self.tab_ps.setObjectName("tab_ps")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.tab_ps)
        self.verticalLayout_3.setContentsMargins(9, 9, 9, 9)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.widget_5 = QtWidgets.QWidget(self.tab_ps)
        self.widget_5.setStyleSheet("\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(140, 224, 241, 255), stop:1 rgba(121, 243, 145, 255));")
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.widget_5)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.widget_6 = QtWidgets.QWidget(self.widget_5)
        self.widget_6.setObjectName("widget_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget_6)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.widget_7 = QtWidgets.QWidget(self.widget_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_7.sizePolicy().hasHeightForWidth())
        self.widget_7.setSizePolicy(sizePolicy)
        self.widget_7.setObjectName("widget_7")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.widget_7)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.splitter_PS = QtWidgets.QSplitter(self.widget_7)
        self.splitter_PS.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_PS.setHandleWidth(10)
        self.splitter_PS.setObjectName("splitter_PS")
        self.layoutWidget_4 = QtWidgets.QWidget(self.splitter_PS)
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.layoutWidget_4)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(5)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(6)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.searchbar_PS = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.searchbar_PS.setStyleSheet("QLineEdit{\n"
" border: 0.5px solid black;\n"
" padding: 1px, 0px, 0px, 0px;\n"
"background-color:white;\n"
"}")
        self.searchbar_PS.setInputMask("")
        self.searchbar_PS.setText("")
        self.searchbar_PS.setObjectName("searchbar_PS")
        self.horizontalLayout_5.addWidget(self.searchbar_PS)
        self.refresh_pch_btn = QtWidgets.QPushButton(self.layoutWidget_4)
        self.refresh_pch_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.refresh_pch_btn.setMouseTracking(True)
        self.refresh_pch_btn.setStyleSheet("QPushButton{\n"
"border-top-right-radius: 10px 5px;\n"
"padding: 2px 5px 2px 5px;\n"
"border: 1px solid black;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249);\n"
"}")
        self.refresh_pch_btn.setObjectName("refresh_pch_btn")
        self.horizontalLayout_5.addWidget(self.refresh_pch_btn)
        self.verticalLayout_8.addLayout(self.horizontalLayout_5)
        self.table_PS = QtWidgets.QTableWidget(self.layoutWidget_4)
        self.table_PS.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.table_PS.setMouseTracking(False)
        self.table_PS.setStyleSheet("background-color:white;")
        self.table_PS.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.table_PS.setFrameShadow(QtWidgets.QFrame.Plain)
        self.table_PS.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.table_PS.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_PS.setAlternatingRowColors(False)
        self.table_PS.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_PS.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectItems)
        self.table_PS.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.table_PS.setGridStyle(QtCore.Qt.SolidLine)
        self.table_PS.setRowCount(1)
        self.table_PS.setColumnCount(5)
        self.table_PS.setObjectName("table_PS")
        item = QtWidgets.QTableWidgetItem()
        self.table_PS.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_PS.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_PS.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_PS.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_PS.setHorizontalHeaderItem(4, item)
        self.table_PS.horizontalHeader().setCascadingSectionResizes(True)
        self.table_PS.horizontalHeader().setDefaultSectionSize(100)
        self.table_PS.horizontalHeader().setMinimumSectionSize(0)
        self.table_PS.horizontalHeader().setStretchLastSection(True)
        self.table_PS.verticalHeader().setVisible(False)
        self.verticalLayout_8.addWidget(self.table_PS)
        self.text_browser_PS = QtWidgets.QTextBrowser(self.splitter_PS)
        self.text_browser_PS.setStatusTip("")
        self.text_browser_PS.setStyleSheet("background-color:white;")
        self.text_browser_PS.setFrameShadow(QtWidgets.QFrame.Plain)
        self.text_browser_PS.setTextInteractionFlags(QtCore.Qt.TextBrowserInteraction)
        self.text_browser_PS.setOpenExternalLinks(True)
        self.text_browser_PS.setOpenLinks(True)
        self.text_browser_PS.setObjectName("text_browser_PS")
        self.horizontalLayout_7.addWidget(self.splitter_PS)
        self.verticalLayout_6.addWidget(self.widget_7)
        self.horizontalLayout_6.addWidget(self.widget_6)
        self.verticalLayout_3.addWidget(self.widget_5)
        self.tabs.addTab(self.tab_ps, "")
        self.tab_ls = QtWidgets.QWidget()
        self.tab_ls.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(140, 224, 241, 255), stop:1 rgba(121, 243, 145, 255));")
        self.tab_ls.setObjectName("tab_ls")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.tab_ls)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.widget_9 = QtWidgets.QWidget(self.tab_ls)
        self.widget_9.setObjectName("widget_9")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.widget_9)
        self.horizontalLayout_8.setContentsMargins(9, 9, 9, 9)
        self.horizontalLayout_8.setSpacing(9)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.splitter_local = QtWidgets.QSplitter(self.widget_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter_local.sizePolicy().hasHeightForWidth())
        self.splitter_local.setSizePolicy(sizePolicy)
        self.splitter_local.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_local.setHandleWidth(10)
        self.splitter_local.setObjectName("splitter_local")
        self.layoutWidget = QtWidgets.QWidget(self.splitter_local)
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(5)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.back_btn_local = QtWidgets.QPushButton(self.layoutWidget)
        self.back_btn_local.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.back_btn_local.setMouseTracking(True)
        self.back_btn_local.setStyleSheet("QPushButton{\n"
"border-top-left-radius: 10px 5px;\n"
"padding: 2px 25px 2px 25px;\n"
"border: 1px solid black;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249);\n"
"}")
        self.back_btn_local.setObjectName("back_btn_local")
        self.horizontalLayout_10.addWidget(self.back_btn_local)
        self.searchbar_local = QtWidgets.QLineEdit(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.searchbar_local.sizePolicy().hasHeightForWidth())
        self.searchbar_local.setSizePolicy(sizePolicy)
        self.searchbar_local.setAcceptDrops(False)
        self.searchbar_local.setStyleSheet("QLineEdit{\n"
" border: 0.5px solid black;\n"
" padding: 1px, 0px, 0px, 0px;\n"
"background-color:white;\n"
"}")
        self.searchbar_local.setInputMask("")
        self.searchbar_local.setObjectName("searchbar_local")
        self.horizontalLayout_10.addWidget(self.searchbar_local)
        self.check_for_updates_btn = QtWidgets.QPushButton(self.layoutWidget)
        self.check_for_updates_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.check_for_updates_btn.setMouseTracking(True)
        self.check_for_updates_btn.setStyleSheet("QPushButton{\n"
"border-top-right-radius: 10px 5px;\n"
"padding: 2px 5px 2px 5px;\n"
"border: 1px solid black;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249);\n"
"}")
        self.check_for_updates_btn.setObjectName("check_for_updates_btn")
        self.horizontalLayout_10.addWidget(self.check_for_updates_btn)
        self.verticalLayout_2.addLayout(self.horizontalLayout_10)
        self.table_local = QtWidgets.QTableWidget(self.layoutWidget)
        self.table_local.setMouseTracking(False)
        self.table_local.setStyleSheet("background-color:white;")
        self.table_local.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.table_local.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
        self.table_local.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_local.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.table_local.setRowCount(1)
        self.table_local.setColumnCount(6)
        self.table_local.setObjectName("table_local")
        item = QtWidgets.QTableWidgetItem()
        self.table_local.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_local.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_local.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_local.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_local.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_local.setHorizontalHeaderItem(5, item)
        self.table_local.horizontalHeader().setCascadingSectionResizes(True)
        self.table_local.horizontalHeader().setDefaultSectionSize(100)
        self.table_local.horizontalHeader().setMinimumSectionSize(0)
        self.table_local.horizontalHeader().setStretchLastSection(True)
        self.table_local.verticalHeader().setVisible(False)
        self.table_local.verticalHeader().setDefaultSectionSize(0)
        self.table_local.verticalHeader().setMinimumSectionSize(0)
        self.verticalLayout_2.addWidget(self.table_local)
        self.layoutWidget_2 = QtWidgets.QWidget(self.splitter_local)
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.update_patch_notes = QtWidgets.QPushButton(self.layoutWidget_2)
        self.update_patch_notes.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.update_patch_notes.setMouseTracking(True)
        self.update_patch_notes.setStyleSheet("QPushButton{\n"
"border-top-right-radius: 10px 5px;\n"
"border-top-left-radius: 10px 5px;\n"
"padding: 2px 2px 2px 2px;\n"
"border: 1px solid black;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249)\n"
"}")
        self.update_patch_notes.setObjectName("update_patch_notes")
        self.verticalLayout_12.addWidget(self.update_patch_notes)
        self.text_browser_local = QtWidgets.QTextBrowser(self.layoutWidget_2)
        self.text_browser_local.setStyleSheet("background-color:white;")
        self.text_browser_local.setTextInteractionFlags(QtCore.Qt.LinksAccessibleByKeyboard|QtCore.Qt.LinksAccessibleByMouse|QtCore.Qt.TextBrowserInteraction|QtCore.Qt.TextEditable|QtCore.Qt.TextSelectableByMouse)
        self.text_browser_local.setOpenExternalLinks(True)
        self.text_browser_local.setOpenLinks(True)
        self.text_browser_local.setObjectName("text_browser_local")
        self.verticalLayout_12.addWidget(self.text_browser_local)
        self.horizontalLayout_8.addWidget(self.splitter_local)
        self.verticalLayout_4.addWidget(self.widget_9)
        self.tabs.addTab(self.tab_ls, "")
        self.tab_sd = QtWidgets.QWidget()
        self.tab_sd.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(140, 224, 241, 255), stop:1 rgba(121, 243, 145, 255));")
        self.tab_sd.setObjectName("tab_sd")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.tab_sd)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.splitter_sd_vert = QtWidgets.QSplitter(self.tab_sd)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter_sd_vert.sizePolicy().hasHeightForWidth())
        self.splitter_sd_vert.setSizePolicy(sizePolicy)
        self.splitter_sd_vert.setOrientation(QtCore.Qt.Vertical)
        self.splitter_sd_vert.setHandleWidth(10)
        self.splitter_sd_vert.setObjectName("splitter_sd_vert")
        self.sd_tree = QtWidgets.QTreeView(self.splitter_sd_vert)
        self.sd_tree.setStyleSheet("background-color: white")
        self.sd_tree.setLineWidth(10000)
        self.sd_tree.setMidLineWidth(10000)
        self.sd_tree.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.sd_tree.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.sd_tree.setProperty("showDropIndicator", False)
        self.sd_tree.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.sd_tree.setIndentation(20)
        self.sd_tree.setRootIsDecorated(True)
        self.sd_tree.setSortingEnabled(False)
        self.sd_tree.setAnimated(True)
        self.sd_tree.setAllColumnsShowFocus(True)
        self.sd_tree.setWordWrap(True)
        self.sd_tree.setHeaderHidden(True)
        self.sd_tree.setObjectName("sd_tree")
        self.sd_tree.header().setVisible(False)
        self.layoutWidget_3 = QtWidgets.QWidget(self.splitter_sd_vert)
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.layoutWidget_3)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.delete_folder_sd_btn = QtWidgets.QPushButton(self.layoutWidget_3)
        self.delete_folder_sd_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.delete_folder_sd_btn.setMouseTracking(True)
        self.delete_folder_sd_btn.setStyleSheet("QPushButton{\n"
"border-radius: 5px;\n"
"padding: 2px 2px 2px 2px;\n"
"border: 1px solid black;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249)\n"
"}")
        self.delete_folder_sd_btn.setObjectName("delete_folder_sd_btn")
        self.verticalLayout_11.addWidget(self.delete_folder_sd_btn)
        self.import_all_btn = QtWidgets.QPushButton(self.layoutWidget_3)
        self.import_all_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.import_all_btn.setMouseTracking(True)
        self.import_all_btn.setStyleSheet("QPushButton{\n"
"border-radius: 5px;\n"
"padding: 2px 2px 2px 2px;\n"
"border: 1px solid black;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249)\n"
"}")
        self.import_all_btn.setObjectName("import_all_btn")
        self.verticalLayout_11.addWidget(self.import_all_btn)
        self.import_all_ver_btn = QtWidgets.QPushButton(self.layoutWidget_3)
        self.import_all_ver_btn.setStyleSheet("QPushButton{\n"
"border-radius: 5px;\n"
"padding: 2px 2px 2px 2px;\n"
"border: 1px solid black;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249)\n"
"}")
        self.import_all_ver_btn.setObjectName("import_all_ver_btn")
        self.verticalLayout_11.addWidget(self.import_all_ver_btn)
        self.splitter_sd_hori = QtWidgets.QSplitter(self.layoutWidget_3)
        self.splitter_sd_hori.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_sd_hori.setHandleWidth(10)
        self.splitter_sd_hori.setObjectName("splitter_sd_hori")
        self.table_sd_left = QtWidgets.QTableWidget(self.splitter_sd_hori)
        self.table_sd_left.setMouseTracking(False)
        self.table_sd_left.setAcceptDrops(True)
        self.table_sd_left.setStyleSheet("background-color:white;")
        self.table_sd_left.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_sd_left.setDragEnabled(False)
        self.table_sd_left.setDragDropOverwriteMode(True)
        self.table_sd_left.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.table_sd_left.setDefaultDropAction(QtCore.Qt.IgnoreAction)
        self.table_sd_left.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_sd_left.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_sd_left.setRowCount(32)
        self.table_sd_left.setColumnCount(3)
        self.table_sd_left.setObjectName("table_sd_left")
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(17, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(18, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(19, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(20, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(21, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(22, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(23, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(24, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(25, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(26, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(27, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(28, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(29, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(30, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setVerticalHeaderItem(31, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_left.setHorizontalHeaderItem(2, item)
        self.table_sd_left.horizontalHeader().setMinimumSectionSize(0)
        self.table_sd_left.horizontalHeader().setStretchLastSection(True)
        self.table_sd_left.verticalHeader().setMinimumSectionSize(0)
        self.table_sd_right = QtWidgets.QTableWidget(self.splitter_sd_hori)
        self.table_sd_right.setMouseTracking(False)
        self.table_sd_right.setAcceptDrops(True)
        self.table_sd_right.setStyleSheet("background-color:white;")
        self.table_sd_right.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_sd_right.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.table_sd_right.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_sd_right.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_sd_right.setRowCount(32)
        self.table_sd_right.setColumnCount(3)
        self.table_sd_right.setObjectName("table_sd_right")
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(17, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(18, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(19, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(20, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(21, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(22, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(23, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(24, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(25, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(26, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(27, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(28, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(29, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(30, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setVerticalHeaderItem(31, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_sd_right.setHorizontalHeaderItem(2, item)
        self.table_sd_right.horizontalHeader().setMinimumSectionSize(0)
        self.table_sd_right.horizontalHeader().setStretchLastSection(True)
        self.table_sd_right.verticalHeader().setMinimumSectionSize(0)
        self.verticalLayout_11.addWidget(self.splitter_sd_hori)
        self.horizontalLayout.addWidget(self.splitter_sd_vert)
        self.tabs.addTab(self.tab_sd, "")
        self.tab_bank = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tab_bank.sizePolicy().hasHeightForWidth())
        self.tab_bank.setSizePolicy(sizePolicy)
        self.tab_bank.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(140, 224, 241, 255), stop:1 rgba(121, 243, 145, 255));")
        self.tab_bank.setObjectName("tab_bank")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.tab_bank)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.splitter_bank = QtWidgets.QSplitter(self.tab_bank)
        self.splitter_bank.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_bank.setHandleWidth(10)
        self.splitter_bank.setObjectName("splitter_bank")
        self.layoutWidget_6 = QtWidgets.QWidget(self.splitter_bank)
        self.layoutWidget_6.setObjectName("layoutWidget_6")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget_6)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.btn_save_bank = QtWidgets.QPushButton(self.layoutWidget_6)
        self.btn_save_bank.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_save_bank.setMouseTracking(True)
        self.btn_save_bank.setStyleSheet("QPushButton{\n"
"border-top-left-radius: 10px 5px;\n"
"padding: 2px 25px 2px 25px;\n"
"border: 1px solid gray;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249);\n"
"}")
        self.btn_save_bank.setObjectName("btn_save_bank")
        self.horizontalLayout_3.addWidget(self.btn_save_bank)
        self.btn_load_bank = QtWidgets.QPushButton(self.layoutWidget_6)
        self.btn_load_bank.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_load_bank.setMouseTracking(True)
        self.btn_load_bank.setStyleSheet("QPushButton{\n"
"padding: 2px 25px 2px 25px;\n"
"border: 1px solid gray;\n"
"background-color: rgb(224, 224, 224);\n"
"\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249)\n"
"}")
        self.btn_load_bank.setObjectName("btn_load_bank")
        self.horizontalLayout_3.addWidget(self.btn_load_bank)
        self.btn_export_bank = QtWidgets.QPushButton(self.layoutWidget_6)
        self.btn_export_bank.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btn_export_bank.setMouseTracking(True)
        self.btn_export_bank.setStyleSheet("QPushButton{\n"
"border-top-right-radius: 10px 5px;\n"
"padding: 2px 5px 2px 5px;\n"
"border: 1px solid gray;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249);\n"
"}")
        self.btn_export_bank.setObjectName("btn_export_bank")
        self.horizontalLayout_3.addWidget(self.btn_export_bank)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.splitter_bank_tables = QtWidgets.QSplitter(self.layoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter_bank_tables.sizePolicy().hasHeightForWidth())
        self.splitter_bank_tables.setSizePolicy(sizePolicy)
        self.splitter_bank_tables.setStyleSheet("")
        self.splitter_bank_tables.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_bank_tables.setHandleWidth(10)
        self.splitter_bank_tables.setObjectName("splitter_bank_tables")
        self.table_bank_left = QtWidgets.QTableWidget(self.splitter_bank_tables)
        self.table_bank_left.setMouseTracking(False)
        self.table_bank_left.setToolTip("")
        self.table_bank_left.setStyleSheet("background-color:white;")
        self.table_bank_left.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_bank_left.setDragDropOverwriteMode(True)
        self.table_bank_left.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.table_bank_left.setDefaultDropAction(QtCore.Qt.IgnoreAction)
        self.table_bank_left.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_bank_left.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_bank_left.setRowCount(32)
        self.table_bank_left.setColumnCount(2)
        self.table_bank_left.setObjectName("table_bank_left")
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(17, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(18, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(19, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(20, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(21, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(22, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(23, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(24, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(25, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(26, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(27, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(28, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(29, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(30, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setVerticalHeaderItem(31, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_left.setHorizontalHeaderItem(1, item)
        self.table_bank_left.horizontalHeader().setMinimumSectionSize(0)
        self.table_bank_left.horizontalHeader().setStretchLastSection(True)
        self.table_bank_left.verticalHeader().setMinimumSectionSize(0)
        self.table_bank_right = QtWidgets.QTableWidget(self.splitter_bank_tables)
        self.table_bank_right.setMouseTracking(False)
        self.table_bank_right.setToolTip("")
        self.table_bank_right.setStyleSheet("background-color:white;")
        self.table_bank_right.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_bank_right.setDragDropOverwriteMode(True)
        self.table_bank_right.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)
        self.table_bank_right.setDefaultDropAction(QtCore.Qt.IgnoreAction)
        self.table_bank_right.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_bank_right.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_bank_right.setRowCount(32)
        self.table_bank_right.setColumnCount(2)
        self.table_bank_right.setObjectName("table_bank_right")
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(17, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(18, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(19, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(20, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(21, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(22, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(23, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(24, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(25, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(26, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(27, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(28, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(29, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(30, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setVerticalHeaderItem(31, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_right.setHorizontalHeaderItem(1, item)
        self.table_bank_right.horizontalHeader().setMinimumSectionSize(0)
        self.table_bank_right.horizontalHeader().setStretchLastSection(True)
        self.table_bank_right.verticalHeader().setMinimumSectionSize(0)
        self.verticalLayout.addWidget(self.splitter_bank_tables)
        self.layoutWidget_5 = QtWidgets.QWidget(self.splitter_bank)
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.layoutWidget_5)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setSpacing(5)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.back_btn_bank = QtWidgets.QPushButton(self.layoutWidget_5)
        self.back_btn_bank.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.back_btn_bank.setMouseTracking(True)
        self.back_btn_bank.setStyleSheet("QPushButton{\n"
"border-top-left-radius: 10px 5px;\n"
"padding: 2px 25px 2px 25px;\n"
"border: 1px solid gray;\n"
"background-color: rgb(224, 224, 224);\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(217, 235, 249);\n"
"}")
        self.back_btn_bank.setObjectName("back_btn_bank")
        self.horizontalLayout_11.addWidget(self.back_btn_bank)
        self.searchbar_bank = QtWidgets.QLineEdit(self.layoutWidget_5)
        self.searchbar_bank.setWhatsThis("")
        self.searchbar_bank.setStyleSheet("QLineEdit{\n"
" border: 0.5px solid gray;\n"
" padding: 1px, 0px, 0px, 0px;\n"
"background-color:white;\n"
"}")
        self.searchbar_bank.setInputMask("")
        self.searchbar_bank.setObjectName("searchbar_bank")
        self.horizontalLayout_11.addWidget(self.searchbar_bank)
        self.verticalLayout_9.addLayout(self.horizontalLayout_11)
        self.table_bank_local = QtWidgets.QTableWidget(self.layoutWidget_5)
        self.table_bank_local.setToolTip("")
        self.table_bank_local.setStyleSheet("background-color:white;")
        self.table_bank_local.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.table_bank_local.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table_bank_local.setDragEnabled(True)
        self.table_bank_local.setDragDropOverwriteMode(False)
        self.table_bank_local.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)
        self.table_bank_local.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.table_bank_local.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table_bank_local.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.table_bank_local.setRowCount(1)
        self.table_bank_local.setColumnCount(4)
        self.table_bank_local.setObjectName("table_bank_local")
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_local.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_local.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_local.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_bank_local.setHorizontalHeaderItem(3, item)
        self.table_bank_local.horizontalHeader().setCascadingSectionResizes(True)
        self.table_bank_local.horizontalHeader().setMinimumSectionSize(0)
        self.table_bank_local.horizontalHeader().setStretchLastSection(True)
        self.table_bank_local.verticalHeader().setVisible(False)
        self.table_bank_local.verticalHeader().setMinimumSectionSize(0)
        self.verticalLayout_9.addWidget(self.table_bank_local)
        self.text_browser_bank = QtWidgets.QTextBrowser(self.splitter_bank)
        self.text_browser_bank.setStyleSheet("background-color:white;")
        self.text_browser_bank.setTextInteractionFlags(QtCore.Qt.TextBrowserInteraction)
        self.text_browser_bank.setOpenExternalLinks(True)
        self.text_browser_bank.setOpenLinks(True)
        self.text_browser_bank.setObjectName("text_browser_bank")
        self.horizontalLayout_4.addWidget(self.splitter_bank)
        self.tabs.addTab(self.tab_bank, "")
        self.horizontalLayout_2.addWidget(self.tabs)
        self.verticalLayout_5.addLayout(self.horizontalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1567, 27))
        self.menubar.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
        self.menubar.setAcceptDrops(False)
        self.menubar.setNativeMenuBar(True)
        self.menubar.setObjectName("menubar")
        self.menuFiel = QtWidgets.QMenu(self.menubar)
        self.menuFiel.setObjectName("menuFiel")
        self.menuSort = QtWidgets.QMenu(self.menubar)
        self.menuSort.setObjectName("menuSort")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionSpecify_SD_Card_Location = QtWidgets.QAction(MainWindow)
        self.actionSpecify_SD_Card_Location.setShortcutVisibleInContextMenu(True)
        self.actionSpecify_SD_Card_Location.setObjectName("actionSpecify_SD_Card_Location")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setShortcutVisibleInContextMenu(True)
        self.actionQuit.setObjectName("actionQuit")
        self.actionSort_by_title_A_Z = QtWidgets.QAction(MainWindow)
        self.actionSort_by_title_A_Z.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_title_A_Z.setObjectName("actionSort_by_title_A_Z")
        self.actionSort_by_title_Z_A = QtWidgets.QAction(MainWindow)
        self.actionSort_by_title_Z_A.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_title_Z_A.setObjectName("actionSort_by_title_Z_A")
        self.actionSort_by_date_new_old = QtWidgets.QAction(MainWindow)
        self.actionSort_by_date_new_old.setShortcutContext(QtCore.Qt.WindowShortcut)
        self.actionSort_by_date_new_old.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_date_new_old.setObjectName("actionSort_by_date_new_old")
        self.actionSort_by_date_old_new = QtWidgets.QAction(MainWindow)
        self.actionSort_by_date_old_new.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_date_old_new.setObjectName("actionSort_by_date_old_new")
        self.actionSort_by_likes_high_low = QtWidgets.QAction(MainWindow)
        self.actionSort_by_likes_high_low.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_likes_high_low.setObjectName("actionSort_by_likes_high_low")
        self.actionSort_by_likes_low_high = QtWidgets.QAction(MainWindow)
        self.actionSort_by_likes_low_high.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_likes_low_high.setObjectName("actionSort_by_likes_low_high")
        self.actionSort_by_views_high_low = QtWidgets.QAction(MainWindow)
        self.actionSort_by_views_high_low.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_views_high_low.setObjectName("actionSort_by_views_high_low")
        self.actionSort_by_views_low_high = QtWidgets.QAction(MainWindow)
        self.actionSort_by_views_low_high.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_views_low_high.setObjectName("actionSort_by_views_low_high")
        self.actionSort_by_downloads_high_low = QtWidgets.QAction(MainWindow)
        self.actionSort_by_downloads_high_low.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_downloads_high_low.setObjectName("actionSort_by_downloads_high_low")
        self.actionSort_by_downloads_low_high = QtWidgets.QAction(MainWindow)
        self.actionSort_by_downloads_low_high.setShortcutVisibleInContextMenu(True)
        self.actionSort_by_downloads_low_high.setObjectName("actionSort_by_downloads_low_high")
        self.actionZOIA_Librarian_Help = QtWidgets.QAction(MainWindow)
        self.actionZOIA_Librarian_Help.setObjectName("actionZOIA_Librarian_Help")
        self.actionAlternating_Row_Colours = QtWidgets.QAction(MainWindow)
        self.actionAlternating_Row_Colours.setShortcutVisibleInContextMenu(True)
        self.actionAlternating_Row_Colours.setObjectName("actionAlternating_Row_Colours")
        self.actionImport_A_Patch = QtWidgets.QAction(MainWindow)
        self.actionImport_A_Patch.setShortcutVisibleInContextMenu(True)
        self.actionImport_A_Patch.setObjectName("actionImport_A_Patch")
        self.actionToggle_Dark_Mode = QtWidgets.QAction(MainWindow)
        self.actionToggle_Dark_Mode.setObjectName("actionToggle_Dark_Mode")
        self.actionImport_Multiple_Patches = QtWidgets.QAction(MainWindow)
        self.actionImport_Multiple_Patches.setShortcutVisibleInContextMenu(True)
        self.actionImport_Multiple_Patches.setObjectName("actionImport_Multiple_Patches")
        self.actionArial = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.actionArial.setFont(font)
        self.actionArial.setObjectName("actionArial")
        self.actionArial_Black = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setBold(True)
        font.setWeight(75)
        self.actionArial_Black.setFont(font)
        self.actionArial_Black.setObjectName("actionArial_Black")
        self.actionComic_Sans_MS = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.actionComic_Sans_MS.setFont(font)
        self.actionComic_Sans_MS.setObjectName("actionComic_Sans_MS")
        self.actionCourier_New = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        self.actionCourier_New.setFont(font)
        self.actionCourier_New.setObjectName("actionCourier_New")
        self.actionGeorgia = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Georgia")
        self.actionGeorgia.setFont(font)
        self.actionGeorgia.setObjectName("actionGeorgia")
        self.actionLucida_Console = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Lucida Console")
        self.actionLucida_Console.setFont(font)
        self.actionLucida_Console.setObjectName("actionLucida_Console")
        self.actionLucida_Sans_Unicode = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Lucida Sans Unicode")
        self.actionLucida_Sans_Unicode.setFont(font)
        self.actionLucida_Sans_Unicode.setObjectName("actionLucida_Sans_Unicode")
        self.actionPalatino_Linotype = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Palatino Linotype")
        self.actionPalatino_Linotype.setFont(font)
        self.actionPalatino_Linotype.setObjectName("actionPalatino_Linotype")
        self.actionTahoma = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Tahoma")
        self.actionTahoma.setFont(font)
        self.actionTahoma.setObjectName("actionTahoma")
        self.actionTimes_New_Roman = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        self.actionTimes_New_Roman.setFont(font)
        self.actionTimes_New_Roman.setObjectName("actionTimes_New_Roman")
        self.actionTrebuchet_MS = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        self.actionTrebuchet_MS.setFont(font)
        self.actionTrebuchet_MS.setObjectName("actionTrebuchet_MS")
        self.actionVerdana = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        self.actionVerdana.setFont(font)
        self.actionVerdana.setObjectName("actionVerdana")
        self.actionPapyrus = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Papyrus")
        self.actionPapyrus.setFont(font)
        self.actionPapyrus.setObjectName("actionPapyrus")
        self.actionWingdings = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        self.actionWingdings.setFont(font)
        self.actionWingdings.setObjectName("actionWingdings")
        self.actionIncrease_Font_Size = QtWidgets.QAction(MainWindow)
        self.actionIncrease_Font_Size.setShortcutVisibleInContextMenu(True)
        self.actionIncrease_Font_Size.setObjectName("actionIncrease_Font_Size")
        self.actionDecrease_Font_Size = QtWidgets.QAction(MainWindow)
        self.actionDecrease_Font_Size.setShortcutVisibleInContextMenu(True)
        self.actionDecrease_Font_Size.setObjectName("actionDecrease_Font_Size")
        self.actionFont = QtWidgets.QAction(MainWindow)
        self.actionFont.setShortcutVisibleInContextMenu(True)
        self.actionFont.setObjectName("actionFont")
        self.actionImport_Version_History_directory = QtWidgets.QAction(MainWindow)
        self.actionImport_Version_History_directory.setShortcutVisibleInContextMenu(True)
        self.actionImport_Version_History_directory.setObjectName("actionImport_Version_History_directory")
        self.menuFiel.addAction(self.actionSpecify_SD_Card_Location)
        self.menuFiel.addAction(self.actionImport_A_Patch)
        self.menuFiel.addAction(self.actionImport_Multiple_Patches)
        self.menuFiel.addAction(self.actionImport_Version_History_directory)
        self.menuFiel.addSeparator()
        self.menuFiel.addAction(self.actionQuit)
        self.menuSort.addAction(self.actionSort_by_title_A_Z)
        self.menuSort.addAction(self.actionSort_by_title_Z_A)
        self.menuSort.addAction(self.actionSort_by_date_new_old)
        self.menuSort.addAction(self.actionSort_by_date_old_new)
        self.menuSort.addAction(self.actionSort_by_likes_high_low)
        self.menuSort.addAction(self.actionSort_by_likes_low_high)
        self.menuSort.addAction(self.actionSort_by_views_high_low)
        self.menuSort.addAction(self.actionSort_by_views_low_high)
        self.menuSort.addAction(self.actionSort_by_downloads_high_low)
        self.menuSort.addAction(self.actionSort_by_downloads_low_high)
        self.menuOptions.addAction(self.actionAlternating_Row_Colours)
        self.menuOptions.addAction(self.actionFont)
        self.menuOptions.addAction(self.actionIncrease_Font_Size)
        self.menuOptions.addAction(self.actionDecrease_Font_Size)
        self.menubar.addAction(self.menuFiel.menuAction())
        self.menubar.addAction(self.menuSort.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())

        self.retranslateUi(MainWindow)
        self.tabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ZOIA Librarian -  Beta 2"))
        self.tabs.setAccessibleName(_translate("MainWindow", "Tab List"))
        self.tabs.setAccessibleDescription(_translate("MainWindow", "This list contains four tabs, PatchStorage View, Local Storage View, SD Card View, and Banks. It allows you to switch between tabs to access different features contained with the ZOIA Librarian."))
        self.searchbar_PS.setToolTip(_translate("MainWindow", "Type and hit enter/return to search!"))
        self.searchbar_PS.setStatusTip(_translate("MainWindow", "Type and hit enter/return to search!"))
        self.searchbar_PS.setAccessibleName(_translate("MainWindow", "PatchStorage View search bar"))
        self.searchbar_PS.setAccessibleDescription(_translate("MainWindow", "Searches through the ZOIA patches currently hosted on PatchStorage for any that match what is written in the search query. Hit enter or return to initiate the search."))
        self.refresh_pch_btn.setToolTip(_translate("MainWindow", "Click here to refresh the PatchStorage patch list."))
        self.refresh_pch_btn.setStatusTip(_translate("MainWindow", "Click here to refresh the PatchStorage patch list."))
        self.refresh_pch_btn.setAccessibleName(_translate("MainWindow", "Refresh PatchStorage patch list button"))
        self.refresh_pch_btn.setAccessibleDescription(_translate("MainWindow", "This button will refresh the data in the PatchStorage patch table with the latest patches on PatchStorage should the list ever become out of sync."))
        self.refresh_pch_btn.setText(_translate("MainWindow", "Refresh patches"))
        self.table_PS.setAccessibleName(_translate("MainWindow", "PatchStorage Table"))
        self.table_PS.setAccessibleDescription(_translate("MainWindow", "Displays all of the ZOIA patches that are currently hosted on PatchStorage."))
        item = self.table_PS.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Title"))
        item = self.table_PS.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Tags"))
        item = self.table_PS.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Categories"))
        item = self.table_PS.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Date Modified"))
        item = self.table_PS.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Download"))
        self.text_browser_PS.setAccessibleName(_translate("MainWindow", "Additional Patch Notes Display"))
        self.text_browser_PS.setAccessibleDescription(_translate("MainWindow", "Displays additional information for a selected patch. This includes the author\'s name, the like count, the download count, the view count, and a preview link (if it exists)"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_ps), _translate("MainWindow", "PatchStorage View"))
        self.tabs.setTabToolTip(self.tabs.indexOf(self.tab_ps), _translate("MainWindow", "Switch to view all ZOIA patches on PatchStorage"))
        self.back_btn_local.setToolTip(_translate("MainWindow", "Click here to back to the full patch list."))
        self.back_btn_local.setStatusTip(_translate("MainWindow", "Click here to back to the full patch list."))
        self.back_btn_local.setAccessibleName(_translate("MainWindow", "Back button Local Storage View"))
        self.back_btn_local.setAccessibleDescription(_translate("MainWindow", "When clicked, exits out of the Version History for a patch and returns to the full list of patches currently stored in the ZOIA Librarian"))
        self.back_btn_local.setText(_translate("MainWindow", "Back"))
        self.searchbar_local.setToolTip(_translate("MainWindow", "Type and hit enter/return to search!"))
        self.searchbar_local.setStatusTip(_translate("MainWindow", "Type and hit enter/return to search!"))
        self.searchbar_local.setAccessibleName(_translate("MainWindow", "LocalStorage View search bar"))
        self.searchbar_local.setAccessibleDescription(_translate("MainWindow", "Searches through the ZOIA patches currently saved in the ZOIA Librarian for any that match what is written in the search query. Hit enter or return to initiate the search."))
        self.check_for_updates_btn.setToolTip(_translate("MainWindow", "Click here to check for updates for all patches listed below."))
        self.check_for_updates_btn.setStatusTip(_translate("MainWindow", "Click here to check for updates for all patches listed below."))
        self.check_for_updates_btn.setAccessibleName(_translate("MainWindow", "Check for updates button"))
        self.check_for_updates_btn.setAccessibleDescription(_translate("MainWindow", "Automatically checks for updates to any patches listed in the Local Storage View table when clicked. Should any be found, a popup will let you know how many patches were updated."))
        self.check_for_updates_btn.setText(_translate("MainWindow", "Check for updates"))
        self.table_local.setAccessibleName(_translate("MainWindow", "Local Storage View table"))
        self.table_local.setAccessibleDescription(_translate("MainWindow", "Displays all of the patches that have been saved to the ZOIA Librarian"))
        item = self.table_local.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Title"))
        item = self.table_local.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Tags"))
        item = self.table_local.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Categories"))
        item = self.table_local.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Date Modified"))
        item = self.table_local.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Export"))
        item = self.table_local.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Delete"))
        self.update_patch_notes.setToolTip(_translate("MainWindow", "Click here to update the patch notes for the currently selected patch."))
        self.update_patch_notes.setStatusTip(_translate("MainWindow", "Click here to update the patch notes for the currently selected patch."))
        self.update_patch_notes.setAccessibleName(_translate("MainWindow", "Update Patch Notes button"))
        self.update_patch_notes.setAccessibleDescription(_translate("MainWindow", "When clicked, updates the patch notes for the currently selected patch. Patch notes can be add directly below in the Additional Patch Notes Display. "))
        self.update_patch_notes.setText(_translate("MainWindow", "Update Patch Notes"))
        self.text_browser_local.setAccessibleName(_translate("MainWindow", "Additional Patch Notes Display"))
        self.text_browser_local.setAccessibleDescription(_translate("MainWindow", "Displays additional information for a selected patch. This includes the author\'s name, the like count, the download count, the view count, and a preview link (if it exists)"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_ls), _translate("MainWindow", "Local Storage View"))
        self.tabs.setTabToolTip(self.tabs.indexOf(self.tab_ls), _translate("MainWindow", "Switch to your locally saved patches"))
        self.sd_tree.setAccessibleName(_translate("MainWindow", "SD Card Viewer"))
        self.sd_tree.setAccessibleDescription(_translate("MainWindow", "Dispalys the contents of the previously specified SD Card (which is specified via the menu bar at File->Specify SD Card path, or by using Alt+S and then specifying that way)."))
        self.delete_folder_sd_btn.setToolTip(_translate("MainWindow", "Click here to delete the currently selected item above from your SD card."))
        self.delete_folder_sd_btn.setStatusTip(_translate("MainWindow", "Click here to delete the currently selected item above from your SD card."))
        self.delete_folder_sd_btn.setAccessibleName(_translate("MainWindow", "Delete Selected Item from SD Card Tree View Button"))
        self.delete_folder_sd_btn.setAccessibleDescription(_translate("MainWindow", "Will attempt to delete the currently selected item in the SD tree view above from your SD card. Will create a popup if the currently selected item is a folder, at which point a warning will indicate that deletion will delete everything contained within. The options are yes to continue with the deletion and no to abort. "))
        self.delete_folder_sd_btn.setText(_translate("MainWindow", "Delete Selected Item Above"))
        self.import_all_btn.setToolTip(_translate("MainWindow", "Click here to import all patches currently listed below."))
        self.import_all_btn.setStatusTip(_translate("MainWindow", "Click here to import all patches currently listed below."))
        self.import_all_btn.setAccessibleName(_translate("MainWindow", "Import All Patches button"))
        self.import_all_btn.setAccessibleDescription(_translate("MainWindow", "Attempts to import all of the patches listed in the tables below (SD card table left and SD card table right) into the ZOIA Librarian. This requires that a folder is selected from the SD Card Viewer above that contains patches."))
        self.import_all_btn.setText(_translate("MainWindow", "Import All Listed Patches Below"))
        self.import_all_ver_btn.setText(_translate("MainWindow", "Import All Listed Patches Below As A Version History"))
        self.table_sd_left.setAccessibleName(_translate("MainWindow", "SD Card Table left"))
        self.table_sd_left.setAccessibleDescription(_translate("MainWindow", "Displays patches that would occupy slots 0-31 on a ZOIA"))
        item = self.table_sd_left.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "0"))
        item = self.table_sd_left.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "1"))
        item = self.table_sd_left.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "2"))
        item = self.table_sd_left.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "3"))
        item = self.table_sd_left.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "4"))
        item = self.table_sd_left.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "5"))
        item = self.table_sd_left.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "6"))
        item = self.table_sd_left.verticalHeaderItem(7)
        item.setText(_translate("MainWindow", "7"))
        item = self.table_sd_left.verticalHeaderItem(8)
        item.setText(_translate("MainWindow", "8"))
        item = self.table_sd_left.verticalHeaderItem(9)
        item.setText(_translate("MainWindow", "9"))
        item = self.table_sd_left.verticalHeaderItem(10)
        item.setText(_translate("MainWindow", "10"))
        item = self.table_sd_left.verticalHeaderItem(11)
        item.setText(_translate("MainWindow", "11"))
        item = self.table_sd_left.verticalHeaderItem(12)
        item.setText(_translate("MainWindow", "12"))
        item = self.table_sd_left.verticalHeaderItem(13)
        item.setText(_translate("MainWindow", "13"))
        item = self.table_sd_left.verticalHeaderItem(14)
        item.setText(_translate("MainWindow", "14"))
        item = self.table_sd_left.verticalHeaderItem(15)
        item.setText(_translate("MainWindow", "15"))
        item = self.table_sd_left.verticalHeaderItem(16)
        item.setText(_translate("MainWindow", "16"))
        item = self.table_sd_left.verticalHeaderItem(17)
        item.setText(_translate("MainWindow", "17"))
        item = self.table_sd_left.verticalHeaderItem(18)
        item.setText(_translate("MainWindow", "18"))
        item = self.table_sd_left.verticalHeaderItem(19)
        item.setText(_translate("MainWindow", "19"))
        item = self.table_sd_left.verticalHeaderItem(20)
        item.setText(_translate("MainWindow", "20"))
        item = self.table_sd_left.verticalHeaderItem(21)
        item.setText(_translate("MainWindow", "21"))
        item = self.table_sd_left.verticalHeaderItem(22)
        item.setText(_translate("MainWindow", "22"))
        item = self.table_sd_left.verticalHeaderItem(23)
        item.setText(_translate("MainWindow", "23"))
        item = self.table_sd_left.verticalHeaderItem(24)
        item.setText(_translate("MainWindow", "24"))
        item = self.table_sd_left.verticalHeaderItem(25)
        item.setText(_translate("MainWindow", "25"))
        item = self.table_sd_left.verticalHeaderItem(26)
        item.setText(_translate("MainWindow", "26"))
        item = self.table_sd_left.verticalHeaderItem(27)
        item.setText(_translate("MainWindow", "27"))
        item = self.table_sd_left.verticalHeaderItem(28)
        item.setText(_translate("MainWindow", "28"))
        item = self.table_sd_left.verticalHeaderItem(29)
        item.setText(_translate("MainWindow", "29"))
        item = self.table_sd_left.verticalHeaderItem(30)
        item.setText(_translate("MainWindow", "30"))
        item = self.table_sd_left.verticalHeaderItem(31)
        item.setText(_translate("MainWindow", "31"))
        item = self.table_sd_left.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Patch"))
        item = self.table_sd_left.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Remove"))
        item = self.table_sd_left.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Import"))
        self.table_sd_right.setAccessibleName(_translate("MainWindow", "SD Card Table right"))
        self.table_sd_right.setAccessibleDescription(_translate("MainWindow", "Displays patches that would occupy slots 32-63 on a ZOIA"))
        item = self.table_sd_right.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "32"))
        item = self.table_sd_right.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "33"))
        item = self.table_sd_right.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "34"))
        item = self.table_sd_right.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "35"))
        item = self.table_sd_right.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "36"))
        item = self.table_sd_right.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "37"))
        item = self.table_sd_right.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "38"))
        item = self.table_sd_right.verticalHeaderItem(7)
        item.setText(_translate("MainWindow", "39"))
        item = self.table_sd_right.verticalHeaderItem(8)
        item.setText(_translate("MainWindow", "40"))
        item = self.table_sd_right.verticalHeaderItem(9)
        item.setText(_translate("MainWindow", "41"))
        item = self.table_sd_right.verticalHeaderItem(10)
        item.setText(_translate("MainWindow", "42"))
        item = self.table_sd_right.verticalHeaderItem(11)
        item.setText(_translate("MainWindow", "43"))
        item = self.table_sd_right.verticalHeaderItem(12)
        item.setText(_translate("MainWindow", "44"))
        item = self.table_sd_right.verticalHeaderItem(13)
        item.setText(_translate("MainWindow", "45"))
        item = self.table_sd_right.verticalHeaderItem(14)
        item.setText(_translate("MainWindow", "46"))
        item = self.table_sd_right.verticalHeaderItem(15)
        item.setText(_translate("MainWindow", "47"))
        item = self.table_sd_right.verticalHeaderItem(16)
        item.setText(_translate("MainWindow", "48"))
        item = self.table_sd_right.verticalHeaderItem(17)
        item.setText(_translate("MainWindow", "49"))
        item = self.table_sd_right.verticalHeaderItem(18)
        item.setText(_translate("MainWindow", "50"))
        item = self.table_sd_right.verticalHeaderItem(19)
        item.setText(_translate("MainWindow", "51"))
        item = self.table_sd_right.verticalHeaderItem(20)
        item.setText(_translate("MainWindow", "52"))
        item = self.table_sd_right.verticalHeaderItem(21)
        item.setText(_translate("MainWindow", "53"))
        item = self.table_sd_right.verticalHeaderItem(22)
        item.setText(_translate("MainWindow", "54"))
        item = self.table_sd_right.verticalHeaderItem(23)
        item.setText(_translate("MainWindow", "55"))
        item = self.table_sd_right.verticalHeaderItem(24)
        item.setText(_translate("MainWindow", "56"))
        item = self.table_sd_right.verticalHeaderItem(25)
        item.setText(_translate("MainWindow", "57"))
        item = self.table_sd_right.verticalHeaderItem(26)
        item.setText(_translate("MainWindow", "58"))
        item = self.table_sd_right.verticalHeaderItem(27)
        item.setText(_translate("MainWindow", "59"))
        item = self.table_sd_right.verticalHeaderItem(28)
        item.setText(_translate("MainWindow", "60"))
        item = self.table_sd_right.verticalHeaderItem(29)
        item.setText(_translate("MainWindow", "61"))
        item = self.table_sd_right.verticalHeaderItem(30)
        item.setText(_translate("MainWindow", "62"))
        item = self.table_sd_right.verticalHeaderItem(31)
        item.setText(_translate("MainWindow", "63"))
        item = self.table_sd_right.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Patch"))
        item = self.table_sd_right.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Remove"))
        item = self.table_sd_right.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Import"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_sd), _translate("MainWindow", "SD Card View"))
        self.tabs.setTabToolTip(self.tabs.indexOf(self.tab_sd), _translate("MainWindow", "Switch to view your SD card within the ZOIA Librarian"))
        self.btn_save_bank.setToolTip(_translate("MainWindow", "Click here to save your Bank."))
        self.btn_save_bank.setStatusTip(_translate("MainWindow", "Click here to save your Bank."))
        self.btn_save_bank.setAccessibleName(_translate("MainWindow", "Save Bank button"))
        self.btn_save_bank.setAccessibleDescription(_translate("MainWindow", "When clicked, will open a popup asking for a Bank name, which will then be saved such that it can be loaded at a later time."))
        self.btn_save_bank.setText(_translate("MainWindow", "Save Bank"))
        self.btn_load_bank.setToolTip(_translate("MainWindow", "Click here to load a Bank."))
        self.btn_load_bank.setStatusTip(_translate("MainWindow", "Click here to load a Bank."))
        self.btn_load_bank.setAccessibleName(_translate("MainWindow", "Load Bank button"))
        self.btn_load_bank.setAccessibleDescription(_translate("MainWindow", "When clicked, you will be prompted to select a Bank to load that has been created in a previous session using the ZOIA Librarian."))
        self.btn_load_bank.setText(_translate("MainWindow", "Load Bank"))
        self.btn_export_bank.setToolTip(_translate("MainWindow", "Click here to export a Bank as a folder to your SD card."))
        self.btn_export_bank.setStatusTip(_translate("MainWindow", "Click here to export a Bank as a folder to your SD card."))
        self.btn_export_bank.setAccessibleName(_translate("MainWindow", "Export Bank button"))
        self.btn_export_bank.setAccessibleDescription(_translate("MainWindow", "When clicked, will open a popup asking for a Bank name, which will then be saved such that it can be exported to an SD card, should it have been specified previously."))
        self.btn_export_bank.setText(_translate("MainWindow", "Export Bank"))
        self.table_bank_left.setStatusTip(_translate("MainWindow", "Drag and drop a patch here!"))
        self.table_bank_left.setAccessibleName(_translate("MainWindow", "Bank Table left"))
        self.table_bank_left.setAccessibleDescription(_translate("MainWindow", "Displays patches that would occupy slots 0-31 on a ZOIA"))
        item = self.table_bank_left.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "0"))
        item = self.table_bank_left.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "1"))
        item = self.table_bank_left.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "2"))
        item = self.table_bank_left.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "3"))
        item = self.table_bank_left.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "4"))
        item = self.table_bank_left.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "5"))
        item = self.table_bank_left.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "6"))
        item = self.table_bank_left.verticalHeaderItem(7)
        item.setText(_translate("MainWindow", "7"))
        item = self.table_bank_left.verticalHeaderItem(8)
        item.setText(_translate("MainWindow", "8"))
        item = self.table_bank_left.verticalHeaderItem(9)
        item.setText(_translate("MainWindow", "9"))
        item = self.table_bank_left.verticalHeaderItem(10)
        item.setText(_translate("MainWindow", "10"))
        item = self.table_bank_left.verticalHeaderItem(11)
        item.setText(_translate("MainWindow", "11"))
        item = self.table_bank_left.verticalHeaderItem(12)
        item.setText(_translate("MainWindow", "12"))
        item = self.table_bank_left.verticalHeaderItem(13)
        item.setText(_translate("MainWindow", "13"))
        item = self.table_bank_left.verticalHeaderItem(14)
        item.setText(_translate("MainWindow", "14"))
        item = self.table_bank_left.verticalHeaderItem(15)
        item.setText(_translate("MainWindow", "15"))
        item = self.table_bank_left.verticalHeaderItem(16)
        item.setText(_translate("MainWindow", "16"))
        item = self.table_bank_left.verticalHeaderItem(17)
        item.setText(_translate("MainWindow", "17"))
        item = self.table_bank_left.verticalHeaderItem(18)
        item.setText(_translate("MainWindow", "18"))
        item = self.table_bank_left.verticalHeaderItem(19)
        item.setText(_translate("MainWindow", "19"))
        item = self.table_bank_left.verticalHeaderItem(20)
        item.setText(_translate("MainWindow", "20"))
        item = self.table_bank_left.verticalHeaderItem(21)
        item.setText(_translate("MainWindow", "21"))
        item = self.table_bank_left.verticalHeaderItem(22)
        item.setText(_translate("MainWindow", "22"))
        item = self.table_bank_left.verticalHeaderItem(23)
        item.setText(_translate("MainWindow", "23"))
        item = self.table_bank_left.verticalHeaderItem(24)
        item.setText(_translate("MainWindow", "24"))
        item = self.table_bank_left.verticalHeaderItem(25)
        item.setText(_translate("MainWindow", "25"))
        item = self.table_bank_left.verticalHeaderItem(26)
        item.setText(_translate("MainWindow", "26"))
        item = self.table_bank_left.verticalHeaderItem(27)
        item.setText(_translate("MainWindow", "27"))
        item = self.table_bank_left.verticalHeaderItem(28)
        item.setText(_translate("MainWindow", "28"))
        item = self.table_bank_left.verticalHeaderItem(29)
        item.setText(_translate("MainWindow", "29"))
        item = self.table_bank_left.verticalHeaderItem(30)
        item.setText(_translate("MainWindow", "30"))
        item = self.table_bank_left.verticalHeaderItem(31)
        item.setText(_translate("MainWindow", "31"))
        item = self.table_bank_left.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Patch"))
        item = self.table_bank_left.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Remove"))
        self.table_bank_right.setStatusTip(_translate("MainWindow", "Drag and drop a patch here!"))
        self.table_bank_right.setAccessibleName(_translate("MainWindow", "Bank table right"))
        self.table_bank_right.setAccessibleDescription(_translate("MainWindow", "Displays patches that would occupy slots 32-63 on a ZOIA"))
        item = self.table_bank_right.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "32"))
        item = self.table_bank_right.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "33"))
        item = self.table_bank_right.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "34"))
        item = self.table_bank_right.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "35"))
        item = self.table_bank_right.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "36"))
        item = self.table_bank_right.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "37"))
        item = self.table_bank_right.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "38"))
        item = self.table_bank_right.verticalHeaderItem(7)
        item.setText(_translate("MainWindow", "39"))
        item = self.table_bank_right.verticalHeaderItem(8)
        item.setText(_translate("MainWindow", "40"))
        item = self.table_bank_right.verticalHeaderItem(9)
        item.setText(_translate("MainWindow", "41"))
        item = self.table_bank_right.verticalHeaderItem(10)
        item.setText(_translate("MainWindow", "42"))
        item = self.table_bank_right.verticalHeaderItem(11)
        item.setText(_translate("MainWindow", "43"))
        item = self.table_bank_right.verticalHeaderItem(12)
        item.setText(_translate("MainWindow", "44"))
        item = self.table_bank_right.verticalHeaderItem(13)
        item.setText(_translate("MainWindow", "45"))
        item = self.table_bank_right.verticalHeaderItem(14)
        item.setText(_translate("MainWindow", "46"))
        item = self.table_bank_right.verticalHeaderItem(15)
        item.setText(_translate("MainWindow", "47"))
        item = self.table_bank_right.verticalHeaderItem(16)
        item.setText(_translate("MainWindow", "48"))
        item = self.table_bank_right.verticalHeaderItem(17)
        item.setText(_translate("MainWindow", "49"))
        item = self.table_bank_right.verticalHeaderItem(18)
        item.setText(_translate("MainWindow", "50"))
        item = self.table_bank_right.verticalHeaderItem(19)
        item.setText(_translate("MainWindow", "51"))
        item = self.table_bank_right.verticalHeaderItem(20)
        item.setText(_translate("MainWindow", "52"))
        item = self.table_bank_right.verticalHeaderItem(21)
        item.setText(_translate("MainWindow", "53"))
        item = self.table_bank_right.verticalHeaderItem(22)
        item.setText(_translate("MainWindow", "54"))
        item = self.table_bank_right.verticalHeaderItem(23)
        item.setText(_translate("MainWindow", "55"))
        item = self.table_bank_right.verticalHeaderItem(24)
        item.setText(_translate("MainWindow", "56"))
        item = self.table_bank_right.verticalHeaderItem(25)
        item.setText(_translate("MainWindow", "57"))
        item = self.table_bank_right.verticalHeaderItem(26)
        item.setText(_translate("MainWindow", "58"))
        item = self.table_bank_right.verticalHeaderItem(27)
        item.setText(_translate("MainWindow", "59"))
        item = self.table_bank_right.verticalHeaderItem(28)
        item.setText(_translate("MainWindow", "60"))
        item = self.table_bank_right.verticalHeaderItem(29)
        item.setText(_translate("MainWindow", "61"))
        item = self.table_bank_right.verticalHeaderItem(30)
        item.setText(_translate("MainWindow", "62"))
        item = self.table_bank_right.verticalHeaderItem(31)
        item.setText(_translate("MainWindow", "63"))
        item = self.table_bank_right.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Patch"))
        item = self.table_bank_right.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Remove"))
        self.back_btn_bank.setToolTip(_translate("MainWindow", "Click here to back to the full patch list."))
        self.back_btn_bank.setStatusTip(_translate("MainWindow", "Click here to back to the full patch list."))
        self.back_btn_bank.setAccessibleName(_translate("MainWindow", "Back button Bank"))
        self.back_btn_bank.setAccessibleDescription(_translate("MainWindow", "When clicked, exits out of the Version History for a patch and returns to the full list of patches currently stored in the ZOIA Librarian"))
        self.back_btn_bank.setText(_translate("MainWindow", "Back"))
        self.searchbar_bank.setToolTip(_translate("MainWindow", "Type and hit enter/return to search!"))
        self.searchbar_bank.setStatusTip(_translate("MainWindow", "Type and hit enter/return to search!"))
        self.searchbar_bank.setAccessibleName(_translate("MainWindow", "Banks search bar"))
        self.searchbar_bank.setAccessibleDescription(_translate("MainWindow", "Searches through the ZOIA patches currently saved in the ZOIA Librarian for any that match what is written in the search query. Hit enter or return to initiate the search."))
        self.table_bank_local.setStatusTip(_translate("MainWindow", "Drag a patch to one of the tables on the left!"))
        self.table_bank_local.setAccessibleName(_translate("MainWindow", "Banks table"))
        self.table_bank_local.setAccessibleDescription(_translate("MainWindow", "Displays all of the patches that have been saved to the ZOIA Librarian"))
        item = self.table_bank_local.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Title"))
        item = self.table_bank_local.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Tags"))
        item = self.table_bank_local.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Categories"))
        item = self.table_bank_local.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Date Modified"))
        self.text_browser_bank.setAccessibleName(_translate("MainWindow", "Additional Patch Notes Display"))
        self.text_browser_bank.setAccessibleDescription(_translate("MainWindow", "Displays additional information for a selected patch. This includes the author\'s name, the like count, the download count, the view count, and a preview link (if it exists)"))
        self.tabs.setTabText(self.tabs.indexOf(self.tab_bank), _translate("MainWindow", "Banks"))
        self.tabs.setTabToolTip(self.tabs.indexOf(self.tab_bank), _translate("MainWindow", "Switch to view the Bank creator"))
        self.menuFiel.setTitle(_translate("MainWindow", "File"))
        self.menuSort.setTitle(_translate("MainWindow", "Sort"))
        self.menuOptions.setTitle(_translate("MainWindow", "Options"))
        self.actionSpecify_SD_Card_Location.setText(_translate("MainWindow", "Specify SD Card Location"))
        self.actionSpecify_SD_Card_Location.setShortcut(_translate("MainWindow", "Alt+S"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionSort_by_title_A_Z.setText(_translate("MainWindow", "Sort by title (A-Z)"))
        self.actionSort_by_title_A_Z.setShortcut(_translate("MainWindow", "Ctrl+1"))
        self.actionSort_by_title_Z_A.setText(_translate("MainWindow", "Sort by title (Z-A)"))
        self.actionSort_by_title_Z_A.setShortcut(_translate("MainWindow", "Ctrl+2"))
        self.actionSort_by_date_new_old.setText(_translate("MainWindow", "Sort by date (new-old)"))
        self.actionSort_by_date_new_old.setShortcut(_translate("MainWindow", "Ctrl+3"))
        self.actionSort_by_date_old_new.setText(_translate("MainWindow", "Sort by date (old-new)"))
        self.actionSort_by_date_old_new.setShortcut(_translate("MainWindow", "Ctrl+4"))
        self.actionSort_by_likes_high_low.setText(_translate("MainWindow", "Sort by likes (high-low)"))
        self.actionSort_by_likes_high_low.setShortcut(_translate("MainWindow", "Ctrl+5"))
        self.actionSort_by_likes_low_high.setText(_translate("MainWindow", "Sort by likes (low-high)"))
        self.actionSort_by_likes_low_high.setShortcut(_translate("MainWindow", "Ctrl+6"))
        self.actionSort_by_views_high_low.setText(_translate("MainWindow", "Sort by views (high-low)"))
        self.actionSort_by_views_high_low.setShortcut(_translate("MainWindow", "Ctrl+7"))
        self.actionSort_by_views_low_high.setText(_translate("MainWindow", "Sort by views (low-high)"))
        self.actionSort_by_views_low_high.setShortcut(_translate("MainWindow", "Ctrl+8"))
        self.actionSort_by_downloads_high_low.setText(_translate("MainWindow", "Sort by downloads (high-low)"))
        self.actionSort_by_downloads_high_low.setShortcut(_translate("MainWindow", "Ctrl+9"))
        self.actionSort_by_downloads_low_high.setText(_translate("MainWindow", "Sort by downloads (low-high)"))
        self.actionSort_by_downloads_low_high.setShortcut(_translate("MainWindow", "Ctrl+0"))
        self.actionZOIA_Librarian_Help.setText(_translate("MainWindow", "ZOIA Librarian Help"))
        self.actionAlternating_Row_Colours.setText(_translate("MainWindow", "Alternating Row Colours"))
        self.actionAlternating_Row_Colours.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.actionImport_A_Patch.setText(_translate("MainWindow", "Import A Patch (.bin)"))
        self.actionImport_A_Patch.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.actionToggle_Dark_Mode.setText(_translate("MainWindow", "Toggle Dark Mode"))
        self.actionImport_Multiple_Patches.setText(_translate("MainWindow", "Import Multiple Patches (directory)"))
        self.actionImport_Multiple_Patches.setShortcut(_translate("MainWindow", "Alt+I"))
        self.actionArial.setText(_translate("MainWindow", "Arial"))
        self.actionArial_Black.setText(_translate("MainWindow", "Arial Black"))
        self.actionComic_Sans_MS.setText(_translate("MainWindow", "Comic Sans"))
        self.actionCourier_New.setText(_translate("MainWindow", "Courier New"))
        self.actionGeorgia.setText(_translate("MainWindow", "Georgia"))
        self.actionLucida_Console.setText(_translate("MainWindow", "Lucida Console"))
        self.actionLucida_Sans_Unicode.setText(_translate("MainWindow", "Lucida Sans Unicode"))
        self.actionPalatino_Linotype.setText(_translate("MainWindow", "Palatino Linotype"))
        self.actionTahoma.setText(_translate("MainWindow", "Tahoma"))
        self.actionTimes_New_Roman.setText(_translate("MainWindow", "Times New Roman"))
        self.actionTrebuchet_MS.setText(_translate("MainWindow", "Trebuchet MS"))
        self.actionVerdana.setText(_translate("MainWindow", "Verdana (Default)"))
        self.actionPapyrus.setText(_translate("MainWindow", "Papyrus"))
        self.actionWingdings.setText(_translate("MainWindow", "Wingdings (Oh no)"))
        self.actionIncrease_Font_Size.setText(_translate("MainWindow", "Increase Font Size"))
        self.actionIncrease_Font_Size.setShortcut(_translate("MainWindow", "Ctrl+Shift+="))
        self.actionDecrease_Font_Size.setText(_translate("MainWindow", "Decrease Font Size"))
        self.actionDecrease_Font_Size.setShortcut(_translate("MainWindow", "Ctrl+Shift+-"))
        self.actionFont.setText(_translate("MainWindow", "Change Font"))
        self.actionFont.setShortcut(_translate("MainWindow", "Alt+F"))
        self.actionImport_Version_History_directory.setText(_translate("MainWindow", "Import Version History (directory)"))
        self.actionImport_Version_History_directory.setShortcut(_translate("MainWindow", "Alt+V"))
