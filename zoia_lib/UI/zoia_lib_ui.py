
#
# MainWindow.ui is an xml file generated by the QTDesigner tool. That ui file is 
# then run through the pyside2-uic.exe, which is included when you install 
# pysdie2.: 
# 
# pyside2-uic.exe .\MainWindow.ui -o .\ui_main_window.py
# 
# This file is then loaded as the base module for the UI window

import sys
import os
from PySide2.QtWidgets import *
from PySide2.QtUiTools import QUiLoader
from PySide2 import QtCore
from PySide2 import QtGui

if __package__ is None or __package__ == '':
    # uses current directory visibility
    import UI.ui_main_window as ui_mainwin
else:
    # uses current package visibility
    from . import ui_main_window as ui_mainwin


class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.ui = ui_mainwin.Ui_main_window()
        self.ui.setupUi(self)
        self.basedirpath = os.path.expanduser('~') + '\\zoia_lib\\'
        
        # file menu setup
        self.ui.action_connect_to_PatchStorage.triggered.connect(self.OnFileMenu_connect_to_PatchStorage)
        self.ui.action_update_files.triggered.connect(self.OnFileMenu_update)
        self.ui.action_upload_file.triggered.connect(self.OnFileMenu_upload)
        self.ui.action_quit.triggered.connect(self.OnFileMenu_quit)

        # local tab setup
        self.ui.local_filter_text.textChanged.connect(self.on_fs_filtertext_changed)
        # Stubbed in model. using the filesystem
        self.fs_model = QFileSystemModel()
        self.fs_model.setFilter(QtCore.QDir.NoDotAndDotDot 
            | QtCore.QDir.AllEntries 
            | QtCore.QDir.Dirs 
            | QtCore.QDir.Files)
        # FileSystemModel does all of its work on a seperate thread so we need 
        # to generate a call back funstion 
        self.fs_model.directoryLoaded.connect(self.on_fs_model_directoryLoaded)
        self.fs_index = self.fs_model.setRootPath(self.basedirpath)

        # filter the filename column based on the text fieled using
        # a proxy model
        self.proxy_model = QtCore.QSortFilterProxyModel(
            recursiveFilteringEnabled=True,
            filterRole=QFileSystemModel.FileNameRole)
        self.proxy_model.setSourceModel(self.fs_model)
        self.ui.local_tableview.setModel(self.proxy_model)
        self.adjust_root_index()

        #adjust the size of the table data
        self.ui.local_tableview.horizontalHeader().setSectionResizeMode(
            QHeaderView.Stretch)
        
    def on_fs_filtertext_changed(self, text):
        self.proxy_model.setFilterWildcard("*{}*".format(text))
        self.adjust_root_index()

    def adjust_root_index(self):
        root_index = self.fs_model.index(self.basedirpath)
        proxy_index = self.proxy_model.mapFromSource(root_index)
        self.ui.local_tableview.setRootIndex(proxy_index)

    def on_fs_model_directoryLoaded(self):
        statusmessage = "{}\t\t{} items".format(
            self.fs_model.rootPath(), self.fs_model.rowCount(self.fs_index))
        self.ui.statusbar.showMessage(statusmessage)

    def OnFileMenu_connect_to_PatchStorage(self):
        self.ui.statusbar.showMessage("Connecting to PatchStroage.")
    
    def OnFileMenu_update(self):
        self.ui.statusbar.showMessage("Updating local patches to Latest version.") 

    def OnFileMenu_upload(self):
        self.ui.statusbar.showMessage("Uploading selected pacthes to PatchStorage.")
    
    def OnFileMenu_quit(self):
        self.close()


if __name__ == "__main__":
    app = QApplication(sys.argv)

    window = MainWindow()
    window.show()

    sys.exit(app.exec_())
